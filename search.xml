<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java注解</title>
      <link href="/2019/06/04/java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/06/04/java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@value</span>(value=<span class="string">"2"</span>,test=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@demo</span>(<span class="string">"demo1"</span>) <span class="comment">//注解的值可以是任何类型</span></span><br><span class="line"><span class="meta">@demo</span>(<span class="string">"demo2"</span>)<span class="comment">//默认给value赋值</span></span><br><span class="line"><span class="meta">@array</span>（&#123;<span class="meta">@element</span>1(<span class="number">1</span>),<span class="meta">@element</span>2(<span class="number">2</span>)&#125;）</span><br><span class="line"><span class="keyword">private</span> String user;</span><br></pre></td></tr></table></figure><h3 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h3><p>实例化，类型转化，实现接口，异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="meta">@Interned</span> User</span><br><span class="line">myString = (<span class="meta">@NonNull</span> String) str;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnmodifiableList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        @<span class="title">Readonly</span> <span class="title">List</span>&lt;@<span class="title">Readonly</span> <span class="title">T</span>&gt; </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">monitorTemperature</span><span class="params">()</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">        @Critical TemperatureException </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable</span>(Schedules.class)  <span class="comment">//注解container</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Schedule &#123;</span><br><span class="line">  <span class="function">String <span class="title">dayOfMonth</span><span class="params">()</span> <span class="keyword">default</span> "first"</span>;</span><br><span class="line">  <span class="function">String <span class="title">dayOfWeek</span><span class="params">()</span> <span class="keyword">default</span> "Mon"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">hour</span><span class="params">()</span> <span class="keyword">default</span> 12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取注解"><a href="#获取注解" class="headerlink" title="获取注解"></a>获取注解</h3><p>反射相关<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AnnotatedElement.getAnnotation(Class&lt;T&gt;)<span class="comment">//单个注解</span></span><br><span class="line">AnnotatedElement.getAnnotationsByType(Class&lt;T&gt;)<span class="comment">//注解容器</span></span><br></pre></td></tr></table></figure></p><h3 id="注释设计"><a href="#注释设计" class="headerlink" title="注释设计"></a>注释设计</h3><p>使用次数 @repeatable<br>使用目标 @target<br>灵活，有用</p>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Java Technology Phenomenon</title>
      <link href="/2019/05/24/The-Java-Technology-Phenomenon/"/>
      <url>/2019/05/24/The-Java-Technology-Phenomenon/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Java-Technology-Phenomenon"><a href="#The-Java-Technology-Phenomenon" class="headerlink" title="The Java Technology Phenomenon"></a>The Java Technology Phenomenon</h2><p>provide an overview of what this technology can do for you</p><h3 id="About-the-java-technology"><a href="#About-the-java-technology" class="headerlink" title="About the java technology"></a>About the java technology</h3><p>programming language and platform</p><h4 id="the-java-programming-language"><a href="#the-java-programming-language" class="headerlink" title="the java programming language"></a>the java programming language</h4><ol><li>characters</li></ol><ul><li>simple </li><li>architecture neutral </li><li>object oriented </li><li>protable</li><li>distrusted</li><li>high performance</li><li>mutithread</li><li>robust</li><li>dynamic</li><li>secure</li></ul><ol start="2"><li>running<br><img src="/images/1.png" alt="35af7a7ef8490c00de71f0ad643c31e6.png"></li><li>protable<br><img src="/images/2.png" alt="5c15aeeaa94eb6ac6135973520a8674b.png"><br>the VM can perform additional steps at runtime to give your application a performance boost,such as recompile frequently used section of code and find performance bottlenecks</li></ol><hr><h4 id="the-java-platform"><a href="#the-java-platform" class="headerlink" title="the java platform"></a>the java platform</h4><p>the java platform has two components</p><ul><li>the java virtual machine</li><li>the java application programming interface (API)<br><img src="/images/3.png" alt="20f2c6211d66e7cbff4a7b519cd9f20e.png"></li></ul><h3 id="what-can-java-technology-do"><a href="#what-can-java-technology-do" class="headerlink" title="what can java technology do"></a>what can java technology do</h3><ul><li>development tools</li><li>application programming interface</li><li>integration libraries</li></ul><h3 id="how-will-java-technology-change-my-life"><a href="#how-will-java-technology-change-my-life" class="headerlink" title="how will java technology change my life"></a>how will java technology change my life</h3><ul><li>get start quickly</li><li>write less code</li><li>write better code </li><li>develop programs more quickly</li><li>avoid platform dependence</li><li>write once,run anywhere</li><li>distribute software more easily</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea-SpringBootProject</title>
      <link href="/2019/05/23/Idea-SpringBootProject/"/>
      <url>/2019/05/23/Idea-SpringBootProject/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解</title>
      <link href="/2019/05/23/Spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/05/23/Spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="spring注解驱动开发"><a href="#spring注解驱动开发" class="headerlink" title="spring注解驱动开发"></a>spring注解驱动开发</h2><h3 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1 依赖注入"></a>1 依赖注入</h3><h4 id="1-1-组件注册"><a href="#1-1-组件注册" class="headerlink" title="1.1 组件注册"></a>1.1 组件注册</h4><p>@configuration<br>@bean    方法名为类小写，容器初始化时创建<br>@componentScan @include @exclude<br>@typefilter 自定义过滤规则，根据类过滤，根据注解过滤<br>@scope Singleton，prototype session request<br>@lazy 调用时才创建bean<br>@conditional 按照条件注册bean<br>@import<br>@importSelector<br>importBeanDefinitionRegistrar<br>FactoryBean接口  &amp;前缀获取factorybean</p><h4 id="1-2-Bean生命周期"><a href="#1-2-Bean生命周期" class="headerlink" title="1.2 Bean生命周期"></a>1.2 Bean生命周期</h4><p>@bean（initMethod=“init”） init方法在类中<br>@bean（destroyMethod=“destroy”）<br>beanpostprocessor 后置处理器 接口有两个方法，初始化方法之前和初始化方法之后</p><p>创建对象  构造方法加逻辑  populateBean<br>初始化前   applyBeanPostprocessorBeforeInitMethod<br>初始化     invokeInitMethod<br>初始化后   applyBeanPostProcessorAfterInitMethod<br>销毁       </p><h4 id="1-3-属性赋值"><a href="#1-3-属性赋值" class="headerlink" title="1.3 属性赋值"></a>1.3 属性赋值</h4><p>@value  ${“name”}<br>@propertySource 属性文件就是spring容器的环境变量</p><h4 id="1-4-自动注入"><a href="#1-4-自动注入" class="headerlink" title="1.4 自动注入"></a>1.4 自动注入</h4><p>@autowired 根据变量名注入<br>@qualifier 指定bean名称注入<br>@primary 首选注入<br>@profile</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
